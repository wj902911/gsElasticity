/// This is the "Cook's membrane" benchmark solved using the nonlinear elasticity solver.
/// The problem description and reference solutions can be found in the Ph.D. thesis of O.Weeger
/// "Isogeometric Finite Element Analysis of Nonlinear Structural Vibrations", 2015.
///
/// Author: A.Shamanskiy (2016 - ...., TU Kaiserslautern)
#include <gismo.h>
#include <gsElasticity/gsElasticityAssembler.h>
#include <gsElasticity/gsIterative.h>
#include <gsElasticity/gsWriteParaviewMultiPhysicsExtension.h>
#include <gsElasticity/gsWriteParaviewMultiPhysics.h>

using namespace gismo;

//#define OUTERPATCH


int main(int argc, char* argv[]) {

    gsInfo << "This is Cook's membrane benchmark with nonlinear elasticity solver.\n";

    //=====================================//
                // Input //
    //=====================================//

    real_t r_outer = 1.0;
    real_t r_inner = 0.1;

    real_t youngsModulus = 240.565e6;
    real_t poissonsRatio = 0.4;
    index_t numUniRef = 2;
    index_t numDegElev = 0;
    index_t numPlotPoints = 10000;
    bool meshPlot = true;

    // minimalistic user interface for terminal
    gsCmdLine cmd("This is Cook's membrane benchmark with nonlinear elasticity solver.");
    cmd.addReal("p", "poisson", "Poisson's ratio used in the material law", poissonsRatio);
    cmd.addInt("r", "refine", "Number of uniform refinement application", numUniRef);
    cmd.addInt("d", "degelev", "Number of degree elevation application", numDegElev);
    cmd.addInt("s", "point", "Number of points to plot to Paraview", numPlotPoints);
    try { cmd.getValues(argc, argv); }
    catch (int rv) { return rv; }

    //=============================================//
        // Scanning geometry and creating bases //
    //=============================================//

    gsKnotVector<> KV1(0, 1, 0, 5);
    gsKnotVector<> KV2(0, 1, 0, 5);
    gsKnotVector<> KV3(0, 1, 0, 5);
    gsMatrix<real_t> C1(25, 3);
    gsMatrix<real_t> C2(25, 3);
    gsMatrix<real_t> C3(25, 3);
    gsMatrix<real_t> C(125, 3);
    gsMatrix<real_t> W(125, 1);
#ifdef OUTERPATCH
    gsMatrix<real_t> C_outer(50, 3);
    gsMatrix<real_t> W_outer(50, 1);
    gsMatrix<real_t> W1(25, 1);
    gsKnotVector<> KV4(0, 1, 0, 2);
#endif

    
	
    W <<
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.11438191683587284330769762163982,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.34314575050761941810151256504469,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.68629150101523972438144483021460,

        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.10867849108508043087795158498921,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.32456764352295053299712890293449,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.64619962758132043489922580192797,

        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.11438191683587284330769762163982,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.10867849108508043087795158498921,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.20526495214135032085778220789507,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.40174810706343944133323020651005,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.69731520891156240082864314899780,

        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.34314575050761941810151256504469,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.32456764352295053299712890293449,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.40174810706343944133323020651005,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.57237657197148017473864456405863,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.83730323642847892529061937239021,
		
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.11438191683587284330769762163982, 4.34314575050761941810151256504469, 4.68629150101523972438144483021460,
        4.00000000000000000000000000000000, 4.00000000000000000000000000000000, 4.10867849108508043087795158498921, 4.32456764352295053299712890293449, 4.64619962758132043489922580192797,
        4.11438191683587284330769762163982, 4.10867849108508043087795158498921, 4.20526495214135032085778220789507, 4.40174810706343944133323020651005, 4.69731520891156240082864314899780,
        4.34314575050761941810151256504469, 4.32456764352295053299712890293449, 4.40174810706343944133323020651005, 4.57237657197148017473864456405863, 4.83730323642847892529061937239021,
        4.68629150101523972438144483021460, 4.64619962758132043489922580192797, 4.69731520891156240082864314899780, 4.83730323642847892529061937239021, 5.07179676972449122729358350625262;
    
    C1 <<
        1.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000,
        1.00000000000000000000000000000000, 0.20710678118654751722615969811159, 0.00000000000000000000000000000000,
        0.94439897941033268402577505185036, 0.40269821396808214153395510948030, 0.00000000000000000000000000000000,
        0.84198285288145657823122292029439, 0.57223070949163856724339893844444, 0.00000000000000000000000000000000,
        0.70710678118654746171500846685376, 0.70710678118654746171500846685376, 0.00000000000000000000000000000000,
        1.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.20710678118654751722615969811159,
        1.00000000000000000000000000000000, 0.20710678118654751722615969811159, 0.20710678118654751722615969811159,
        0.94432179734478771671035701729124, 0.40268222903892175734696934341628, 0.19797538630529729064555510831269,
        0.84198285288145646720892045777873, 0.57223070949163856724339893844444, 0.18115045237214510986945015247329,
        0.70710678118654746171500846685376, 0.70710678118654746171500846685376, 0.15891862259789110711771797923575,
        0.94439897941033268402577505185036, 0.00000000000000000000000000000000, 0.40269821396808214153395510948030,
        0.94432179734478771671035701729124, 0.19797538630529729064555510831269, 0.40268222903892175734696934341628,
        0.89514378285984974592537355420063, 0.38556611722930161922917591255100, 0.38556611722930161922917591255100,
        0.80450256336705749937721066089580, 0.55014710267914124219856830677600, 0.35385983263387738029237539194582,
        0.68375661096064965782659328397131, 0.68375661096064965782659328397131, 0.31168902873712167611586210114183,
        0.84198285288145657823122292029439, 0.00000000000000000000000000000000, 0.57223070949163856724339893844444,
        0.84198285288145646720892045777873, 0.18115045237214510986945015247329, 0.57223070949163856724339893844444,
        0.80450256336705749937721066089580, 0.35385983263387738029237539194582, 0.55014710267914124219856830677600,
        0.73473280857926925868639500549762, 0.50883886682844026161376405070769, 0.50883886682844026161376405070769,
        0.63966542995691610951070060764323, 0.63966542995691610951070060764323, 0.45271994765504508517750537066604,
        0.70710678118654746171500846685376, 0.00000000000000000000000000000000, 0.70710678118654746171500846685376,
        0.70710678118654746171500846685376, 0.15891862259789110711771797923575, 0.70710678118654746171500846685376,
        0.68375661096064965782659328397131, 0.31168902873712167611586210114183, 0.68375661096064965782659328397131,
        0.63966542995691610951070060764323, 0.45271994765504508517750537066604, 0.63966542995691610951070060764323,
        0.57735026918962573105886804114562, 0.57735026918962573105886804114562, 0.57735026918962573105886804114562;
	
    C2 <<
        0.00000000000000000000000000000000, 1.00000000000000000000000000000000, 0.00000000000000000000000000000000,
        0.20710678118654751722615969811159, 1.00000000000000000000000000000000, 0.00000000000000000000000000000000,
        0.40269821396808214153395510948030, 0.94439897941033268402577505185036, 0.00000000000000000000000000000000,
        0.57223070949163856724339893844444, 0.84198285288145657823122292029439, 0.00000000000000000000000000000000,
        0.70710678118654746171500846685376, 0.70710678118654746171500846685376, 0.00000000000000000000000000000000,
        0.00000000000000000000000000000000, 1.00000000000000000000000000000000, 0.20710678118654751722615969811159,
        0.20710678118654751722615969811159, 1.00000000000000000000000000000000, 0.20710678118654751722615969811159,
        0.40268222903892175734696934341628, 0.94432179734478771671035701729124, 0.19797538630529729064555510831269,
        0.57223070949163856724339893844444, 0.84198285288145646720892045777873, 0.18115045237214510986945015247329,
        0.70710678118654746171500846685376, 0.70710678118654746171500846685376, 0.15891862259789110711771797923575,
        0.00000000000000000000000000000000, 0.94439897941033268402577505185036, 0.40269821396808214153395510948030,
        0.19797538630529729064555510831269, 0.94432179734478771671035701729124, 0.40268222903892175734696934341628,
        0.38556611722930161922917591255100, 0.89514378285984974592537355420063, 0.38556611722930161922917591255100,
        0.55014710267914124219856830677600, 0.80450256336705749937721066089580, 0.35385983263387738029237539194582,
        0.68375661096064965782659328397131, 0.68375661096064965782659328397131, 0.31168902873712167611586210114183,
        0.00000000000000000000000000000000, 0.84198285288145657823122292029439, 0.57223070949163856724339893844444,
        0.18115045237214510986945015247329, 0.84198285288145646720892045777873, 0.57223070949163856724339893844444,
        0.35385983263387738029237539194582, 0.80450256336705749937721066089580, 0.55014710267914124219856830677600,
        0.50883886682844026161376405070769, 0.73473280857926925868639500549762, 0.50883886682844026161376405070769,
        0.63966542995691610951070060764323, 0.63966542995691610951070060764323, 0.45271994765504508517750537066604,
        0.00000000000000000000000000000000, 0.70710678118654746171500846685376, 0.70710678118654746171500846685376,
        0.15891862259789110711771797923575, 0.70710678118654746171500846685376, 0.70710678118654746171500846685376,
        0.31168902873712167611586210114183, 0.68375661096064965782659328397131, 0.68375661096064965782659328397131,
        0.45271994765504508517750537066604, 0.63966542995691610951070060764323, 0.63966542995691610951070060764323,
        0.57735026918962573105886804114562, 0.57735026918962573105886804114562, 0.57735026918962573105886804114562;

    C3 <<
        0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 1.00000000000000000000000000000000,
        0.20710678118654751722615969811159, 0.00000000000000000000000000000000, 1.00000000000000000000000000000000,
        0.40269821396808214153395510948030, 0.00000000000000000000000000000000, 0.94439897941033268402577505185036,
        0.57223070949163856724339893844444, 0.00000000000000000000000000000000, 0.84198285288145657823122292029439,
        0.70710678118654746171500846685376, 0.00000000000000000000000000000000, 0.70710678118654746171500846685376,
        0.00000000000000000000000000000000, 0.20710678118654751722615969811159, 1.00000000000000000000000000000000,
        0.20710678118654751722615969811159, 0.20710678118654751722615969811159, 1.00000000000000000000000000000000,
        0.40268222903892175734696934341628, 0.19797538630529729064555510831269, 0.94432179734478771671035701729124,
        0.57223070949163856724339893844444, 0.18115045237214510986945015247329, 0.84198285288145646720892045777873,
        0.70710678118654746171500846685376, 0.15891862259789110711771797923575, 0.70710678118654746171500846685376,
        0.00000000000000000000000000000000, 0.40269821396808214153395510948030, 0.94439897941033268402577505185036,
        0.19797538630529729064555510831269, 0.40268222903892175734696934341628, 0.94432179734478771671035701729124,
        0.38556611722930161922917591255100, 0.38556611722930161922917591255100, 0.89514378285984974592537355420063,
        0.55014710267914124219856830677600, 0.35385983263387738029237539194582, 0.80450256336705749937721066089580,
        0.68375661096064965782659328397131, 0.31168902873712167611586210114183, 0.68375661096064965782659328397131,
        0.00000000000000000000000000000000, 0.57223070949163856724339893844444, 0.84198285288145657823122292029439,
        0.18115045237214510986945015247329, 0.57223070949163856724339893844444, 0.84198285288145646720892045777873,
        0.35385983263387738029237539194582, 0.55014710267914124219856830677600, 0.80450256336705749937721066089580,
        0.50883886682844026161376405070769, 0.50883886682844026161376405070769, 0.73473280857926925868639500549762,
        0.63966542995691610951070060764323, 0.45271994765504508517750537066604, 0.63966542995691610951070060764323,
        0.00000000000000000000000000000000, 0.70710678118654746171500846685376, 0.70710678118654746171500846685376,
        0.15891862259789110711771797923575, 0.70710678118654746171500846685376, 0.70710678118654746171500846685376,
        0.31168902873712167611586210114183, 0.68375661096064965782659328397131, 0.68375661096064965782659328397131,
        0.45271994765504508517750537066604, 0.63966542995691610951070060764323, 0.63966542995691610951070060764323,
        0.57735026918962573105886804114562, 0.57735026918962573105886804114562, 0.57735026918962573105886804114562;
	
    C <<
        //1
        0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000,
        0.25000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000,
        0.50000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000,
        0.75000000000000000000000000000000, 0.00000000000000000000000000000000, 0.00000000000000000000000000000000,
        C1(0, 0), C1(0, 1), C1(0, 2),
        //2
        0.00000000000000000000000000000000, 0.25000000000000000000000000000000, 0.00000000000000000000000000000000,
        0.23674569000000000000000000000000, 0.23674569000000000000000000000000, 0.00000000000000000000000000000000,
        0.47160710000000000000000000000000, 0.22359688000000000000000000000000, 0.00000000000000000000000000000000,
        0.70071376000000000000000000000000, 0.21077024000000000000000000000000, 0.00000000000000000000000000000000,
        C1(1, 0), C1(1, 1), C1(1, 2),
        //3
        0.00000000000000000000000000000000, 0.50000000000000000000000000000000, 0.00000000000000000000000000000000,
        0.22359688000000000000000000000000, 0.47160710000000000000000000000000, 0.00000000000000000000000000000000,
        0.44366260000000000000000000000000, 0.44366260000000000000000000000000, 0.00000000000000000000000000000000,
        0.65245426000000000000000000000000, 0.41714970000000000000000000000000, 0.00000000000000000000000000000000,
        C1(2, 0), C1(2, 1), C1(2, 2),
        //4
        0.00000000000000000000000000000000, 0.75000000000000000000000000000000, 0.00000000000000000000000000000000,
        0.21077024000000000000000000000000, 0.70071376000000000000000000000000, 0.00000000000000000000000000000000,
        0.41573481000000000000000000000000, 0.65278512000000000000000000000000, 0.00000000000000000000000000000000,
        0.60785904000000000000000000000000, 0.60785904000000000000000000000000, 0.00000000000000000000000000000000,
        C1(3, 0), C1(3, 1), C1(3, 2),
        //5
        C2(0, 0), C2(0, 1), C2(0, 2),
        C2(1, 0), C2(1, 1), C2(1, 2),
        C2(2, 0), C2(2, 1), C2(2, 2),
        C2(3, 0), C2(3, 1), C2(3, 2),
        C2(4, 0), C2(4, 1), C2(4, 2),
        //6
        0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.25000000000000000000000000000000,
        0.23674569000000000000000000000000, 0.00000000000000000000000000000000, 0.23674569000000000000000000000000,
        0.47160710000000000000000000000000, 0.00000000000000000000000000000000, 0.22359688000000000000000000000000,
        0.70071376000000000000000000000000, 0.00000000000000000000000000000000, 0.21077024000000000000000000000000,
        C1(5, 0), C1(5, 1), C1(5, 2),
        //7
        0.00000000000000000000000000000000, 0.23674569000000000000000000000000, 0.23674569000000000000000000000000,
        0.22667554000000000000000000000000, 0.22667554000000000000000000000000, 0.21415782000000000000000000000000,
        0.44850120000000000000000000000000, 0.21269765000000000000000000000000, 0.20316646000000000000000000000000,
        0.66090212000000000000000000000000, 0.19375962000000000000000000000000, 0.19320935000000000000000000000000,
        C1(6, 0), C1(6, 1), C1(6, 2),
        //8
        0.00000000000000000000000000000000, 0.47160710000000000000000000000000, 0.22359688000000000000000000000000,
        0.21269765000000000000000000000000, 0.44850120000000000000000000000000, 0.20316646000000000000000000000000,
        0.42539530000000000000000000000000, 0.42539530000000000000000000000000, 0.18273604000000000000000000000000,
        0.62109049000000000000000000000000, 0.38751923000000000000000000000000, 0.17564845000000000000000000000000,
        C1(7, 0), C1(7, 1), C1(7, 2),
        //9
        0.00000000000000000000000000000000, 0.70071376000000000000000000000000, 0.21077024000000000000000000000000,
        0.19375962000000000000000000000000, 0.66090212000000000000000000000000, 0.19320935000000000000000000000000,
        0.38751923000000000000000000000000, 0.62109049000000000000000000000000, 0.17564845000000000000000000000000,
        0.58127885000000000000000000000000, 0.58127885000000000000000000000000, 0.15808756000000000000000000000000,
        C1(8, 0), C1(8, 1), C1(8, 2),
        //10
        C2(5, 0), C2(5, 1), C2(5, 2),
        C2(6, 0), C2(6, 1), C2(6, 2),
        C2(7, 0), C2(7, 1), C2(7, 2),
        C2(8, 0), C2(8, 1), C2(8, 2),
        C2(9, 0), C2(9, 1), C2(9, 2),
        //11
        0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.50000000000000000000000000000000,
        0.22359688000000000000000000000000, 0.00000000000000000000000000000000, 0.47160710000000000000000000000000,
        0.44366260000000000000000000000000, 0.00000000000000000000000000000000, 0.44366260000000000000000000000000,
        0.65245426000000000000000000000000, 0.00000000000000000000000000000000, 0.41714970000000000000000000000000,
        C1(10, 0), C1(10, 1), C1(10, 2),
        //12
        0.00000000000000000000000000000000, 0.22359688000000000000000000000000, 0.47160710000000000000000000000000,
        0.21651908000000000000000000000000, 0.21651908000000000000000000000000, 0.43015109000000000000000000000000,
        0.42523061000000000000000000000000, 0.20339931000000000000000000000000, 0.40621482000000000000000000000000,
        0.61957990000000000000000000000000, 0.18461040000000000000000000000000, 0.38521128000000000000000000000000,
        C1(11, 0), C1(11, 1), C1(11, 2),
        //13
        0.00000000000000000000000000000000, 0.44366260000000000000000000000000, 0.44366260000000000000000000000000,
        0.20339931000000000000000000000000, 0.42523061000000000000000000000000, 0.40621482000000000000000000000000,
        0.40679862000000000000000000000000, 0.40679862000000000000000000000000, 0.36876704000000000000000000000000,
        0.58670555000000000000000000000000, 0.36922080000000000000000000000000, 0.35327286000000000000000000000000,
        C1(12, 0), C1(12, 1), C1(12, 2),
        //14
        0.00000000000000000000000000000000, 0.65278512000000000000000000000000, 0.41573481000000000000000000000000,
        0.18461040000000000000000000000000, 0.61980048000000000000000000000000, 0.38426802000000000000000000000000,
        0.36922080000000000000000000000000, 0.58681584000000000000000000000000, 0.35280123000000000000000000000000,
        0.55383120000000000000000000000000, 0.55383120000000000000000000000000, 0.32133443000000000000000000000000,
        C1(13, 0), C1(13, 1), C1(13, 2),
        //15
        C2(10, 0), C2(10, 1), C2(10, 2),
        C2(11, 0), C2(11, 1), C2(11, 2),
        C2(12, 0), C2(12, 1), C2(12, 2),
        C2(13, 0), C2(13, 1), C2(13, 2),
        C2(14, 0), C2(14, 1), C2(14, 2),
        //16
        0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 0.75000000000000000000000000000000,
        0.21077024000000000000000000000000, 0.00000000000000000000000000000000, 0.70071376000000000000000000000000,
        0.41714970000000000000000000000000, 0.00000000000000000000000000000000, 0.65245426000000000000000000000000,
        0.60785904000000000000000000000000, 0.00000000000000000000000000000000, 0.60785904000000000000000000000000,
        C1(15, 0), C1(15, 1), C1(15, 2),
        //17
        0.00000000000000000000000000000000, 0.21077024000000000000000000000000, 0.70071376000000000000000000000000,
        0.20637894000000000000000000000000, 0.20637894000000000000000000000000, 0.64579736000000000000000000000000,
        0.40271818000000000000000000000000, 0.19414333000000000000000000000000, 0.60320236000000000000000000000000,
        0.58072242000000000000000000000000, 0.17548306000000000000000000000000, 0.56663633000000000000000000000000,
        C1(16, 0), C1(16, 1), C1(16, 2),
        //18
        0.00000000000000000000000000000000, 0.41714970000000000000000000000000, 0.65245426000000000000000000000000,
        0.19414333000000000000000000000000, 0.40271818000000000000000000000000, 0.60320236000000000000000000000000,
        0.38828666000000000000000000000000, 0.38828666000000000000000000000000, 0.55395046000000000000000000000000,
        0.55358580000000000000000000000000, 0.35096612000000000000000000000000, 0.52541363000000000000000000000000,
        C1(17, 0), C1(17, 1), C1(17, 2),
        //19
        0.00000000000000000000000000000000, 0.60785904000000000000000000000000, 0.60785904000000000000000000000000,
        0.17548306000000000000000000000000, 0.58072242000000000000000000000000, 0.56663633000000000000000000000000,
        0.35096612000000000000000000000000, 0.55358580000000000000000000000000, 0.52541363000000000000000000000000,
        0.52644918000000000000000000000000, 0.52644918000000000000000000000000, 0.48419092000000000000000000000000,
        C1(18, 0), C1(18, 1), C1(18, 2),
        //20
        0.00000000000000000000000000000000, 0.84198285288145657823122292029439, 0.57223070949163834519879401341313,
        0.18115045237214510986945015247329, 0.84198285288145646720892045777873, 0.57223070949163834519879401341313,
        0.35385983263387738029237539194582, 0.80450256336705749937721066089580, 0.55014710267914102015396338174469,
        0.50883886682844015059146158819203, 0.73473280857926914766409254298196, 0.50883886682844015059146158819203,
        C1(19, 0), C1(19, 1), C1(19, 2),
        //21
        0.00000000000000000000000000000000, 0.00000000000000000000000000000000, 1.00000000000000000000000000000000,
        0.20710678118654751722615969811159, 0.00000000000000000000000000000000, 1.00000000000000000000000000000000,
        0.40269821396808214153395510948030, 0.00000000000000000000000000000000, 0.94439897941033268402577505185036,
        0.57223070949163856724339893844444, 0.00000000000000000000000000000000, 0.84198285288145657823122292029439,
        0.70710678118654746171500846685376, 0.00000000000000000000000000000000, 0.70710678118654746171500846685376,
        //22
        0.00000000000000000000000000000000, 0.20710678118654751722615969811159, 1.00000000000000000000000000000000,
        0.20710678118654751722615969811159, 0.20710678118654751722615969811159, 1.00000000000000000000000000000000,
        0.40268222903892175734696934341628, 0.19797538630529729064555510831269, 0.94432179734478771671035701729124,
        0.57223070949163856724339893844444, 0.18115045237214510986945015247329, 0.84198285288145646720892045777873,
        0.70710678118654746171500846685376, 0.15891862259789110711771797923575, 0.70710678118654746171500846685376,
        //23
        0.00000000000000000000000000000000, 0.40269821396808214153395510948030, 0.94439897941033268402577505185036,
        0.19797538630529729064555510831269, 0.40268222903892175734696934341628, 0.94432179734478771671035701729124,
        0.38556611722930161922917591255100, 0.38556611722930161922917591255100, 0.89514378285984974592537355420063,
        0.55014710267914124219856830677600, 0.35385983263387738029237539194582, 0.80450256336705749937721066089580,
        0.68375661096064965782659328397131, 0.31168902873712167611586210114183, 0.68375661096064965782659328397131,
        //24
        0.00000000000000000000000000000000, 0.57223070949163856724339893844444, 0.84198285288145657823122292029439,
        0.18115045237214510986945015247329, 0.57223070949163856724339893844444, 0.84198285288145646720892045777873,
        0.35385983263387738029237539194582, 0.55014710267914124219856830677600, 0.80450256336705749937721066089580,
        0.50883886682844026161376405070769, 0.50883886682844026161376405070769, 0.73473280857926925868639500549762,
        0.63966542995691610951070060764323, 0.45271994765504508517750537066604, 0.63966542995691610951070060764323,
        //25
        0.00000000000000000000000000000000, 0.70710678118654746171500846685376, 0.70710678118654746171500846685376,
        0.15891862259789110711771797923575, 0.70710678118654746171500846685376, 0.70710678118654746171500846685376,
        0.31168902873712167611586210114183, 0.68375661096064965782659328397131, 0.68375661096064965782659328397131,
        0.45271994765504508517750537066604, 0.63966542995691610951070060764323, 0.63966542995691610951070060764323,
        0.57735026918962573105886804114562, 0.57735026918962573105886804114562, 0.57735026918962573105886804114562;
		
        gsTensorNurbs<3, real_t> patch1(KV1, KV2, KV3, C* r_inner, W);

#ifdef OUTERPATCH
    W1 <<
        4.00000000000000000000000000000000,
        4.00000000000000000000000000000000,
        4.11438191683587284330769762163982,
        4.34314575050761941810151256504469,
        4.68629150101523972438144483021460,
        4.00000000000000000000000000000000,
        4.00000000000000000000000000000000,
        4.10867849108508043087795158498921,
        4.32456764352295053299712890293449,
        4.64619962758132043489922580192797,
        4.11438191683587284330769762163982,
        4.10867849108508043087795158498921,
        4.20526495214135032085778220789507,
        4.40174810706343944133323020651005,
        4.69731520891156240082864314899780,
        4.34314575050761941810151256504469,
        4.32456764352295053299712890293449,
        4.40174810706343944133323020651005,
        4.57237657197148017473864456405863,
        4.83730323642847892529061937239021,
        4.68629150101523972438144483021460,
        4.64619962758132043489922580192797,
        4.69731520891156240082864314899780,
        4.83730323642847892529061937239021,
        5.07179676972449122729358350625262;
    W_outer << W1, W1;
    C_outer << C1 * r_inner, C1* r_outer;
    gsTensorNurbs<3, real_t> patch2(KV1, KV2, KV4, C_outer, W_outer);
    C_outer << C2 * r_inner, C2* r_outer;
    gsTensorNurbs<3, real_t> patch3(KV1, KV2, KV4, C_outer, W_outer);
    C_outer << C3 * r_inner, C3* r_outer;
    gsTensorNurbs<3, real_t> patch4(KV1, KV2, KV4, C_outer, W_outer);
#endif

        // scanning geometry
    gsMultiPatch<> geometry;
    geometry.addPatch(patch1);
#ifdef OUTERPATCH
    geometry.addPatch(patch2);
    geometry.addPatch(patch3);
    geometry.addPatch(patch4);
#endif

    // creating bases
    gsMultiBasis<> basisDisplacement(geometry);
#ifdef OUTERPATCH
    for (index_t i = 0; i < 3; ++i)
    {
        basisDisplacement[1].degreeElevate(1, 2);
        basisDisplacement[2].degreeElevate(1, 2);
        basisDisplacement[3].degreeElevate(1, 2);
    }
#endif
    for (index_t i = 0; i < numDegElev; ++i)
        basisDisplacement.degreeElevate();
    for (index_t i = 0; i < numUniRef; ++i)
        basisDisplacement.uniformRefine();

    //=============================================//
        // Setting loads and boundary conditions //
    //=============================================//

    // neumann BC
    gsConstantFunction<> f(0., 625e4, 0., 3);

    // boundary conditions
    gsBoundaryConditions<> bcInfo;
    for (index_t d = 0; d < 2; ++d)
        bcInfo.addCondition(0, boundary::west, condition_type::dirichlet, nullptr, d);
    bcInfo.addCondition(0, boundary::east, condition_type::neumann, &f);

    // source function, rhs
    gsConstantFunction<> g(0., 0., 0., 3);

    //=============================================//
                  // Solving //
    //=============================================//

    // creating assembler
    gsElasticityAssembler<real_t> assembler(geometry, basisDisplacement, bcInfo, g);
    assembler.options().setReal("YoungsModulus", youngsModulus);
    assembler.options().setReal("PoissonsRatio", poissonsRatio);
    assembler.options().setInt("MaterialLaw", material_law::neo_hooke_ln);
    gsInfo << "Initialized system with " << assembler.numDofs() << " dofs.\n";

    // setting Newton's method
    gsIterative<real_t> solver(assembler);
    solver.options().setInt("Verbosity", solver_verbosity::all);
    solver.options().setInt("Solver", linear_solver::LDLT);


    //=============================================//
                  // Output //
    //=============================================//

    // solution to the nonlinear problem as an isogeometric displacement field
    gsMultiPatch<> displacement;
    assembler.constructSolution(solver.solution(), solver.allFixedDofs(), displacement);
    //gsPiecewiseFunction<> stresses;
    //assembler.constructCauchyStresses(displacement, stresses, stress_components::von_mises);

    gsField<> displacementField(assembler.patches(), displacement);
    //gsField<> stressField(assembler.patches(), stresses, true);
    std::map<std::string, const gsField<>*> fields;
    fields["Displacement"] = &displacementField;
    //fields["von Mises"] = &stressField;

	std::string filenameParaview = "QuarterHemisphere_";
    gsParaviewCollection collection(filenameParaview);

    if (numPlotPoints > 0)
    {
        gsWriteParaviewMultiPhysicsTimeStepWithMesh(fields, filenameParaview, collection, 0, numPlotPoints, meshPlot);
        gsWriteParaviewMultiPhysics(fields, filenameParaview + "ControlPT", numPlotPoints, 0, 1);
    }
	
    if (numPlotPoints > 0)
    {
        collection.save();
    }
    return 0;
}